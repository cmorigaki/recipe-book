apply plugin: 'jacoco'

// Must run after test task
task codeCoverageReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."

    def coverageSourceDirs = [
            "src/main/java",
            "src/main/kotlin",
    ]

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/*$MembersInjector*.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*Module*.*',
            '**/databinding/*'
    ]

    def javaClasses = fileTree(
            dir: "$buildDir/intermediates/aar_main_jar/debug",
            excludes: fileFilter
    )

    // Used by jacoco to collect class files for analysis
    classDirectories.from = files([ javaClasses ])
    // Used by jacoco to collect class files for analysis, here weâ€™re giving it the path stored in our debugTree declaration
    // additionalSourceDirs.from = files(coverageSourceDirs)
    sourceDirectories.from = files(coverageSourceDirs)
    // Save the results of the report generation, this must have the .exec extension but you can decide the path
    executionData.from = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec"
    ])

    // These are the different report file formats that we have enabled jacoco to create reports for
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

task getCoverage(type: Exec, dependsOn: 'codeCoverageReport') {
    group = "Reporting"
    commandLine "open", "$buildDir/reports/jacoco/codeCoverageReport/html/index.html"
}
