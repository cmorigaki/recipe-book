apply plugin: 'jacoco'

def validateTestCoverage() {
    group = "Reporting"
    description = "Validate Jacoco coverage reports after report."

    def jacocoCoverageThresholdDefault = 0.60
    def threshold = project.hasProperty('jacocoCoverageThreshold')
        ? project.jacocoCoverageThreshold
        : jacocoCoverageThresholdDefault

    if (plugins.hasPlugin('kotlin')) {
        setupKotlinReportValidation(threshold)
    } else {
        setupAndroidReportValidation(threshold)
    }
}

def setupAndroidReportValidation(threshold) {
    task jacocoTestCoverageVerification(
        type: JacocoCoverageVerification,
        dependsOn: [ 'testDebugUnitTest' ]
    ) {
        violationRules {
            rule {
                limit {
                    minimum = threshold
                }
            }
        }

        def coverageSourceDirs = [
            "$projectDir/src/main/java",
            "$projectDir/src/main/kotlin",
        ]

        def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            'android/**/*.*',
            'androidx/**/*.*',
            '**/generated/**',
            '**/di/*.*',
            '**/model/*.*',

            //DataBinding
            '**/BR.class',
            '**/DataBindingInfo.class',
            '**/DataBinderMapperImpl$InnerBrLookup.class',
            '**/*Binding.class',
            '**/*BindingImpl.class',
            '**/DataBinderMapperImpl$InnerLayoutIdLookup.class',
            '**/DataBinderMapperImpl.class',
            '**/databinding/*.*'
        ]

        def javaClasses = fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: fileFilter
        )

        // Used by jacoco to collect class files for analysis
        classDirectories.from = files([javaClasses])
        // Used by jacoco to collect class files for analysis, here we’re giving it the path stored in our debugTree declaration
        sourceDirectories.from = files(coverageSourceDirs)
        // Results of the report generation
        executionData.from = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec"
        ])
    }
}

def setupKotlinReportValidation() {
    task jacocoTestCoverageVerification(
        type: JacocoCoverageVerification,
        dependsOn: [ 'testDebugUnitTest' ]
    ) {
        violationRules {
            rule {
                limit {
                    minimum = threshold
                }
            }
        }

        def coverageSourceDirs = [
            "src/main/java",
            "src/main/kotlin",
        ]

        def javaClasses = fileTree(
            dir: "$buildDir/classes/kotlin/main"
        )

        // Used by jacoco to collect class files for analysis
        classDirectories.from = files([javaClasses])
        // Used by jacoco to collect class files for analysis, here we’re giving it the path stored in our debugTree declaration
        sourceDirectories.from = files(coverageSourceDirs)
        // Results of the report generation
        executionData.from = fileTree(dir: "$buildDir", includes: [
            "jacoco/test.exec"
        ])
    }
}
